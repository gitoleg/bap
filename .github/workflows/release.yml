
name: release
on:
  - push
#  schedule:
#     - cron: '0 0 * * SAT' # every Saturday

jobs:
  build:
     runs-on: ubuntu-latest

     env:
       OPAMJOBS: 2
       OPAMRETRES: 8
       RELEASE: bap.2.2.0

     steps:
         - name: Checkout code
           uses: actions/checkout@v2
           with:
             submodules: recursive

         - name: Fake deb
           run: |
             echo "Hello" > bap_2.2.0.deb
             echo "World" > libbap_2.2.0.deb

         - name: Get the previous pre-release
           id: get_prerelease
           uses: ./.github/actions/get-prerelease

         - name: Check the get-prelease action
           run: echo ${{ steps.get_prerelease.outputs.id }}

         - name: Delete previous prerelease
           if: steps.get_prerelease.outputs.id != ''
           uses: author/action-rollback@stable
           with:
             release_id: ${{ steps.get_prerelease.outputs.id }}
           env:
             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

         - name: Create a new prerelease
           id: create_release
           uses: actions/create-release@v1
           env:
             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
           with:
             tag_name: ${{ env.RELEASE }}
             release_name: Release ${{ env.RELEASE }}
          draft: true
          prerelease: true

         # - name: Install OCaml
         #   uses: avsm/setup-ocaml@v1
         #   with:
         #     ocaml-version: 4.09.1+flambda

         # - name: Build deb packages
         #   run: |
         #     ./tools/deb-build.sh
         #     ls -l bap/

         # - name: Upload deb packages
         #   uses: actions/upload-artifact@v2
         #   with:
         #     name: deb-packages
         #     path: bap/*.deb

         # - name: Upload rpm packages
         #   uses: actions/upload-artifact@v2
         #   with:
         #     name: rpm-packages
         #     path: bap/*.rpm

         # - name: Upload archives
         #   uses: actions/upload-artifact@v2
         #   with:
         #     name: tgz-packages
         #     path: bap/*.tgz

         # - name: Create Release
         #   id: create_release
         #   uses: actions/create-release@v1
         #   env:
         #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         #   with:
         #     tag_name: bap.2.2.0
         #     release_name: Release bap.2.2.0
         #     draft: false
         #     prerelease: true

         # - name: Check URL
         #   run: |
         #     echo url is ${{ steps.create_release.outputs.upload_url }}
         #     echo "====="

         - name: Upload Release Asset
           id: upload-release-asset
           uses: actions/upload-release-asset@v1
           env:
             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           with:
             #upload_url: ${{ steps.create_release.outputs.upload_url }}
             upload_url: https://uploads.github.com/repos/gitoleg/bap/releases/29717181/assets{?name,label}
             asset_path: libbap_2.2.0.deb
             asset_name: libbap_2.2.0.deb
             asset_content_type: application/zip